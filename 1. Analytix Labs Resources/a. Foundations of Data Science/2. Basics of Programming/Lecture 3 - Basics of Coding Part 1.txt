programming basics:

*******************
variables:
*******************

---------------------------------------------------------------------
INC rules: Identifier Naming Conventions

1. Names can be alpha-numeric
	e.g. a, b, var, var1, a1
2. No special chars allowed, except the underscore
	e.g. a_1, var_1, emp_name - correct
		 a 1, a.1 - incorrect
3. Names can start with only alphabets or underscore
	e.g. a1, var_1, _a_1_1, _a - correct
		 1var, 1_a - incorrect
4. Don't use any keywords / reserved words from a language
---------------------------------------------------------------------


var = 10
var

----------------------------------
example with the constant value:
10 * 1 = xx
10 * 2 = xx
10 * 3 = xx
..
..
10 * 10 = xx

example with the variable:

var = 25
var * 1 = xx
var * 2 = xx
var * 3 = xx
..
..
var * 10 = xx
-----------------------------------


*********************
datatypes
*********************
In general when we talk about structured data, we come across following data:

1. numeric data
	* whole numbers: 10, 20, 12, -10, 0
			datatypes: bit, tinyint, smallint, int, bigint, long, int8, int16...
	* decimal numbers: 10.5, -1.1, 0.1
			datatypes: float, decimal, numeric, float16, float32 etc...
	* boolean data: True (1), False (0)
			datatype: boolean, binary, bit
	* date and time: 23 Dec 2020, 1 Mar 1990, 28 Oct 2020 17:30
			datatype: date, time, datetime, datetime64, smalldate, etc..
	
2. char data: 
	* alphabets: John, Tables, Chairs
	* alphanumerics: E100001, O100000001
	* special chars - only two exceptions: dot . and hyphen - (iif used properly)
		E_10001, John's Father, 13.199.2.2, 10-
			datatypes: str/string, char, varchar, nchar, nvarchar, text...

**************************
operators
**************************

1. arithmatic: + - * / % ** // ...      [BODMAS]
	e.g. add two numbers: 2, 3
		2 + 3 : result: 5
		
	e.g. divide 5 by 2
		5 / 2  : result: 2.5
		5 // 2 : result: 2
		5 % 2  : result: 1
		
2. assignment: =
	e.g. a = 10, var1 = 20
	
3. arithmatic + assignment: +=, -=, *=, /= ...
		 var = 10
	e.g. var = var + 20 or var += 20
	
4. compare or relational: output is always going to be of boolean type
	i. single valued: > >= < <= == !=
		e.g. var = 10
			 var > 50 : result: False
			 var > 50, 70 - incorrect
			 
			 3 == 3 : result: True
	
	ii. multi valued: in between
		e.g. var = 10
			 var in (5, 10, 15, 20) result: True
			 var in (5, 30, 15, 20) result: False
			 var between 5 and 50 result: True
			 var between 15 and 20 result: False
			 var between 10 and 20 result: True
			 
	iii. wild card: like
		e.g. for the pattern search
			var = "John"
			var == "John Methew" result : False
			var like "John%"
			 
	iv. handling nulls: is null, is not null, isna, notna
		e.g. unknown values
		
5. Logical operators
	
	and or : these two operators are used to combine the boolean outputs
	and : will return True if all conditions return True
	or: will return True if any one condition is True
		e.g. 3 == 3  : True
			 3 > 10  : False
			 10 >= 5 : True
			 
			 3 == 3 and 3 > 10 : False
			 3 == 3 or 3 > 10 : True
			 
	
	not: for negation
		e.g. not True result: False
 x			not 3 == 3 : False
			not 2 == 5 : True
			
	bitwise: & | ~
	
	
Sequence Operators execution: 
() -> O ** -> DM / * -> AS + - -> Conditional -> not -> and -> or
              (left to right)     (left to right)

e.g.
5 + 4 * 9 % (3 + 1) / 6 - 1

Solution:
1: 5 + 4 * 9 % 4 / 6 - 1
2: 5 + 36 % 4 / 6 - 1
3: 5 + 0 / 6 - 1
4: 5 + 0.0 - 1
5: 5.0 - 1
6: 4.0
		
		









